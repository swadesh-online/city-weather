package com.mindfire.cityservice.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.mindfire.cityservice.dto.CityWeatherReport;
import com.mindfire.cityservice.dto.Weather;
import com.mindfire.cityservice.model.City;
import com.mindfire.cityservice.repository.CityRepository;

@Service
public class CityService {
	
	List<String> cityList= new ArrayList<>();
	
	@Autowired
	WeatherConsumerService weatherConsumer;
	
	@Autowired
	CityRepository cityRepository;
	
	@Bean
	RestTemplate restTemplate() {
		
		return new RestTemplate();
	}
	
	
	/**
	 *  This method adds city to the cityList
	 * 
	 * @param cityName - The name of the city to be added
	 * @return List<City> - updated cityList
	 * 
	 */
	public List<City> add(String cityName){
		
		// Checks if city is already present, else add it to the DB
		List<City> existingCities = cityRepository.findAll();
		boolean cityFound=false;
		for(City city:existingCities) {
			
			if(city.getName().equalsIgnoreCase(cityName)) {
				
				cityFound=true; 
				break;
			}
		}
		if(!cityFound) {
			
			cityRepository.save(new City(cityName.toLowerCase()));
		}
		
		return cityRepository.findAll();
	}
	
	/**
	 *  This method is used to fetch all cities from the cityList
	 *  
	 * @return List<String> - updated cityList
	 * 
	 */
	public List<City> fetchAll() {
		
		return cityRepository.findAll();
	}


	/**
	 *  This method is used to remove city from the cityList
	 *  
	 * @param cityName - The name of city to be removed
	 * @return List<String> - updated cityList
	 * 
	 */
	public List<City> delete(String cityName) {
		
		// Checks if the cityName is present in the list, if found removes it. 
		List<City> existingCities = cityRepository.findAll();
		for(City city: existingCities) {
			
			if(city.getName().equalsIgnoreCase(cityName)) {
			
				cityRepository.delete(new City(cityName));
				
			}
		}
		
		return cityRepository.findAll();
	}
	

	/**
	 *  This method is used to fetch the Weather Report of all the cities in cityList
	 *  
	 * @return List of {@link CityWeatherReport}
	 */
	public List<CityWeatherReport> getWeatherReport() {
		 
		List<CityWeatherReport> weatherReports = new ArrayList<CityWeatherReport>();
		
		//Iterating all the cities in the City List
		for(String city : cityList) {
			
			Weather weatherObj = weatherConsumer.getWeather(city);
			
			//Checking for Null values
			if(weatherObj != null 
					&& weatherObj.getLocation() != null 
					&& weatherObj.getCurrent() != null
					&& weatherObj.getForecast()!=null) {
				
				// Adding weatherReport to the weatherReports List.  
				weatherReports.add(
						new CityWeatherReport(
								weatherObj.getLocation().getName(), 
								weatherObj.getCurrent().getCondition().getText(), 
								weatherObj.getForecast().getForecastday().get(0).getDay().getMaxtemp_c(),
								weatherObj.getForecast().getForecastday().get(0).getDay().getMintemp_c()));
			}
		}
		
		return weatherReports;
	}

}
